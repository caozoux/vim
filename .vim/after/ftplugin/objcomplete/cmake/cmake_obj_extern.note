start
cmake#add_library
	add_library(archive SHARED archive.cpp zip.cpp lzma.cpp) #动态库
	add_library(archive STATIC archive.cpp zip.cpp lzma.cpp) #静态库
cmake#add_executable
	add_executable(testapp main.cpp))
cmake#function
	function(test arg1 arg2 )
	message("${arg1} ${arg2}")
	endfunction(test)
cmake#cmake_parse_arguments
	function(MY_INSTALL)
	set(options OPTIONAL FAST)
	set(oneValueArgs DESTINATION RENAME)
	set(multiValueArgs TARGETS CONFIGURATIONS)
	cmake_parse_arguments(MY_INSTALL "${options}" "${oneValueArgs}"
	"${multiValueArgs}" ${ARGN})
	endfunction()
	
	my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)
	
	MY_INSTALL_OPTIONAL = TRUE
	MY_INSTALL_FAST = FALSE (was not used in call to my_install)
	MY_INSTALL_DESTINATION = "bin"
	MY_INSTALL_RENAME = "" (was not used)
	MY_INSTALL_TARGETS = "foo;bar"
	MY_INSTALL_CONFIGURATIONS = "" (was not used)
	MY_INSTALL_UNPARSED_ARGUMENTS = "blub" (nothing expected after "OPTIONAL")
cmake#configure_file
	input: foo.h.in
	option(FOO_ENABLE "Enable Foo" ON)
	if(FOO_ENABLE)
		set(FOO_STRING "foo")
	endif()
	configure_file(foo.h.in foo.h @ONLY)
cmake#foreach
	foreach(loop_var var1)
	endforeach()
	foreach(loop_var IN LIST list[])
	endforeach()
cmake#file
	file(WRITE "test.txt" "asf\n")
	file(APPEND "test.txt" "append: test2\n")    
	file(STRINGS "test.txt" myfile)
	##遍寻test.txt的每行
	foreach(loop_var  ${myfile})
	message(${loop_var})
	endforeach()
	save all the *.cpp in directory src to variable filelist 
	file(GLOB_RECURSE filelist src/*.cpp)
	file(RENAME <oldname> <newname>)
	file(REMOVE_RECURSE [<files>...])
	file(MAKE_DIRECTORY [<directories>...])
	file(RELATIVE_PATH <variable> <directory> <file>))
	file(TIMESTAMP <filename> <variable> [<format>] [UTC])
	file(<COPY|INSTALL> <files>... DESTINATION <dir>)
cmake#list
	list(LENGTH <list> <output variable>)
	list(GET <list> <element index> [<element index> ...]
		 <output variable>)
	list(APPEND <list> [<element> ...])
	list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)
	list(FIND <list> <value> <output variable>)
	list(INSERT <list> <element_index> <element> [<element> ...])
	list(REMOVE_ITEM <list> <value> [<value> ...])
	list(REMOVE_AT <list> <index> [<index> ...])
	list(REMOVE_DUPLICATES <list>)
	list(REVERSE <list>)
	list(SORT <list>)
	LENGTH will return a given list’s length.
	GET will return list of elements specified by indices from the list.
	APPEND will append elements to the list.
	FILTER will include or remove items from the list that match the mode’s pattern. In REGEX mode, items will be matched against the given regular expression. For more information on regular expressions see also the string() command.
	FIND will return the index of the element specified in the list or -1 if it wasn’t found.
	INSERT will insert elements to the list to the specified location.
	REMOVE_AT and REMOVE_ITEM will remove items from the list. The difference is that REMOVE_ITEM will remove the given items, while REMOVE_AT will remove the items at the given indices.
	REMOVE_DUPLICATES will remove duplicated items in the list.
	REVERSE reverses the contents of the list in-place.
	SORT sorts the list in-place alphabetically.

cmake#add_custom_target
	add_custom_command(OUTPUT  ${TEST_FILE}
	  COMMAND echo "Generating log.txt file..."
	  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_LIST_FILE} ${TEST_FILE}
	  COMMENT  "This is a test"
	)
	add_custom_target(Test1 ALL DEPENDS ${TEST_FILE})

	add_custom_command(TARGET Test1
	  PRE_BUILD 
	  COMMAND echo "executing a fake command"
	  COMMENT "This command will be executed before building target Test1"
	 )
	ALL
	BYPRODUCTS
	COMMAND
	COMMENT
	Display
	DEPENDS it will execute the command create by  add_custom_command()
	COMMAND_EXPAND_LISTS
	SOURCES
	VERBATIM
	USES_TERMINAL
	WORKING_DIRECTORY
cmake#add_test
	enable_testing()
	# 测试 1 + 3 , 是否输出打印'is 4'
	add_test (test_1_plus_3 my_test.bin 1 3)
	set_tests_properties (test_1_plus_3
	PROPERTIES PASS_REGULAR_EXPRESSION "is 4")  #
	./my_test.bin 1 3
	is 4
	exit 0!
end

