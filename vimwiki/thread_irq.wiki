= request_threaded_irq =
	int request_threaded_irq(unsigned int irq, irq_handler_t handler,
			 irq_handler_t thread_fn, unsigned long irqflags,
			 const char *devname, void *dev_id)
	
 	If you want to set up a threaded irq handler for your device
 	then you need to supply @handler and @thread_fn. @handler is
 	still called in hard interrupt context and has to check
 	whether the interrupt originates from the device. If yes it
 	needs to disable the interrupt on the device and return
 	IRQ_WAKE_THREAD which will wake up the handler thread and run
 	@thread_fn. This split handler design is necessary to support
 	shared interrupts.
